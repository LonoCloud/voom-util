#!/usr/bin/env bb

(import java.time.format.DateTimeFormatter)
(import java.time.OffsetDateTime)
(import java.time.ZoneOffset)

(def usage (format "usage: %s <PATH> [PATH...] # Optionally, set REPO_ROOT_VOOM instead of supplying <PATH>."
                   *file*))

(defn apply-shell! [args]
  (let [{:keys [exit out] :as res} (apply shell/sh args)]
    (when-not (zero? exit)
      (throw (ex-info {:args args :res res})))
    (str/trim out)))

(def voom-formatter (DateTimeFormatter/ofPattern "yyyyMMdd_HHmmss"))

(defn voom-version [paths]
  (let [targets      (map #(-> % io/file (.getCanonicalPath)) paths)
        date-args    (into ["git" "log" "-1" "--pretty=%cI" "--"] targets)
        git-date-str (apply-shell! date-args)
        date-str     (-> git-date-str
                         str/trim
                         (OffsetDateTime/parse)
                         (.withOffsetSameInstant ZoneOffset/UTC)
                         (.format voom-formatter))

        sha-args (into ["git" "log" "-1" "--pretty=%h" "--"] targets)
        sha      (apply-shell! sha-args)

        status-args (into ["git" "status" "--short" "--"] targets)
        status      (apply-shell! status-args)]
    (format "%s-g%s" date-str (if (str/blank? status) sha "_DIRTY"))))

(let [voom-repo-root? (boolean (System/getenv "REPO_ROOT_VOOM"))
      paths           *command-line-args*
      paths?          (seq paths)]
  (cond
    (and paths? (not voom-repo-root?))
    (println (voom-version paths))

    (and voom-repo-root? (not paths?))
    (println (voom-version []))

    :else
    (do
      (binding [*out* *err*]
        (println usage))
      (System/exit 1))))
